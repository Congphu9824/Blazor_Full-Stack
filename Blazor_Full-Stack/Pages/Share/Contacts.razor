@page "/contacts"
@using Data
@inject HttpClient http
@inject NavigationManager _NavigationManager
<h3>Contact</h3>

<SfGrid DataSource="GridData" AllowFiltering="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel", "Search" })">
	<GridEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true" ></GridEditSettings>
	<GridFilterSettings Type="FilterType.Excel"></GridFilterSettings>
	<GridColumns>
		<GridColumn Field="FirstName" HeaderText="First Name"></GridColumn>
		<GridColumn Field="LastName" HeaderText="Last Name"></GridColumn>
		<GridColumn Field="NickName" HeaderText="Nick Name"></GridColumn>
		<GridColumn Field="Place" HeaderText="Place"></GridColumn>
		<GridColumn Field="DateOfBirth" HeaderText="Date of Birth" Format="yyyy-MM-dd"></GridColumn>

		<GridColumn Width="60">
			<Template>
				@{
					var contact = context as Contact;
					<SfButton CssClass="e-inherit" IconCss="e-icons e-edit" OnClick="@(() => EditContact(contact!.Id))"></SfButton>
				}
			</Template>
		</GridColumn>
		<GridColumn Width="60">
			<Template>
				@{
					var contact = context as Contact;
					<SfButton CssClass="e-inherit" IconCss="e-icons e-delete" OnClick="@(() => DeleteContact(contact!))"></SfButton>
				}
			</Template>
		</GridColumn>
	</GridColumns>
</SfGrid>
@* <p>
	<SfButton IsPrimary="true" Content="Create New Contact" OnClick="CreateContact" />
</p> *@
<SfDialog Width="335px" IsModal="true" @bind-Visible="showDeleteDialog">
	<DialogTemplates>
		<Header>Are you sure?</Header>
		<Content>
			<p>Do you really want to delete @contactToDelete!.NickName?</p>
		</Content>
	</DialogTemplates>
	<DialogButtons>
		<DialogButton Content="Yep." IsPrimary="false" OnClick="ConfirmDeleteContact"></DialogButton>
		<DialogButton Content="Nope." IsPrimary="true" OnClick="CancelDeleteContact"></DialogButton>
	</DialogButtons>
	<DialogAnimationSettings Effect="@DialogEffect.Zoom"></DialogAnimationSettings>
</SfDialog>
@code {
	public List<Contact> GridData { get; set; } = new List<Contact>();

	bool showDeleteDialog = false;
	Contact? contactToDelete;

	void DeleteContact(Contact contact)
	{
		contactToDelete = contact;
		showDeleteDialog = true;
	}

	void CancelDeleteContact(){
		showDeleteDialog = false;
	}

	public async Task ConfirmDeleteContact(){
		if(contactToDelete is null){
			return;
		}
		showDeleteDialog = false;
		var response = await http.DeleteAsync($"api/Contact/{contactToDelete.Id}");
		if(response.IsSuccessStatusCode){
			GridData = await http.GetFromJsonAsync<List<Contact>>("api/Contact");
		}
	}

	void EditContact(int id)
	{
		_NavigationManager.NavigateTo($"contacts/edit/{id}");
	}

	void CreateContact()
	{
		_NavigationManager.NavigateTo("/contacts/new");
	}

	protected override async Task OnInitializedAsync()
	{
		GridData = await http.GetFromJsonAsync<List<Contact>>("api/Contact");
	}


}
